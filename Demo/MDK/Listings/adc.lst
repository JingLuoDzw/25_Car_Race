C251 COMPILER V5.60.0,  adc                                                                05/06/25  17:43:16  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE adc
OBJECT MODULE PLACED IN .\Objects\adc.obj
COMPILER INVOKED BY: D:\APP\Rubbish\c251\C251\BIN\C251.EXE ..\CODE\adc.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\C
                    -ODE;..\USER;..\..\lib\zf_app;..\..\lib\zf_base;..\..\lib\zf_bsp) DEBUG PRINT(.\Listings\adc.lst) TABS(2) OBJECT(.\Object
                    -s\adc.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          void adc_get(int *temp)
    4          {
    5   1          int a1[4], a2[4], a3[4], a4[4], a5[4];
    6   1      
    7   1          a1[0] = (adc_once(ADC_P17, ADC_12BIT));
    8   1          a2[0] = (adc_once(ADC_P16, ADC_12BIT));
    9   1          a3[0] = (adc_once(ADC_P13, ADC_12BIT));
   10   1          a4[0] = (adc_once(ADC_P15, ADC_12BIT));
   11   1          a5[0] = (adc_once(ADC_P14, ADC_12BIT));
   12   1      
   13   1          a1[1] = (adc_once(ADC_P17, ADC_12BIT));
   14   1          a2[1] = (adc_once(ADC_P16, ADC_12BIT));
   15   1          a3[1] = (adc_once(ADC_P13, ADC_12BIT));
   16   1          a4[1] = (adc_once(ADC_P15, ADC_12BIT));
   17   1          a5[1] = (adc_once(ADC_P14, ADC_12BIT));
   18   1      
   19   1          a1[2] = (adc_once(ADC_P17, ADC_12BIT));
   20   1          a2[2] = (adc_once(ADC_P16, ADC_12BIT));
   21   1          a3[2] = (adc_once(ADC_P13, ADC_12BIT));
   22   1          a4[2] = (adc_once(ADC_P15, ADC_12BIT));
   23   1          a5[2] = (adc_once(ADC_P14, ADC_12BIT));
   24   1        
   25   1          a1[3] = (adc_once(ADC_P17, ADC_12BIT));
   26   1          a2[3] = (adc_once(ADC_P16, ADC_12BIT));
   27   1          a3[3] = (adc_once(ADC_P13, ADC_12BIT));
   28   1          a4[3] = (adc_once(ADC_P15, ADC_12BIT));
   29   1          a5[3] = (adc_once(ADC_P14, ADC_12BIT));
   30   1      
   31   1          temp[0] = MeanFilter(a1, 4);
   32   1          temp[1] = MeanFilter(a2, 4);
   33   1          temp[2] = MeanFilter(a3, 4);
   34   1          temp[3] = MeanFilter(a4, 4);
   35   1          temp[4] = MeanFilter(a5, 4);
   36   1      
   37   1          temp[0] = temp[0] < 1 ? 1 : temp[0];
   38   1          temp[1] = temp[1] < 1 ? 1 : temp[1];
   39   1          temp[2] = temp[2] < 1 ? 1 : temp[2];
   40   1          temp[3] = temp[3] < 1 ? 1 : temp[3];
   41   1          temp[4] = temp[4] < 1 ? 1 : temp[4];
   42   1          
   43   1      //    temp[0]=temp[0]>1500?1500:temp[0];
   44   1      //    temp[1]=temp[1]>1500?1500:temp[1];
   45   1      //    temp[2]=temp[2]>1500?1500:temp[2];
   46   1      //    temp[3]=temp[3]>1500?1500:temp[3];
   47   1      
   48   1      //    temp[0]=MeanFilter((adc_once(ADC_P00, ADC_12BIT)),5);
   49   1      //    temp[1]=(adc_once(ADC_P01, ADC_12BIT));
   50   1      //    temp[2]=(adc_once(ADC_P05, ADC_12BIT));
   51   1      //    temp[3]=(adc_once(ADC_P06, ADC_12BIT));
   52   1      //    temp[4] = (adc_once(ADC_P10, ADC_12BIT));
   53   1      //    temp[5] = (adc_once(ADC_P11, ADC_12BIT));
   54   1      //    temp[6] = (adc_once(ADC_P13, ADC_12BIT));
   55   1      //    temp[7] = (adc_once(ADC_P14, ADC_12BIT));
   56   1      }
   57          //int MeanFilter(int *arr, int n)   //中值滤波
C251 COMPILER V5.60.0,  adc                                                                05/06/25  17:43:16  PAGE 2   

   58          //{
   59          //    int temp;
   60          //    int i, j;
   61          //    int buf[100];   // 假设最大长度不超过100，可根据实际调整
   62          
   63          //    // 拷贝原数组到buf，避免修改原数组
   64          //    for (i = 0; i < n; i++)
   65          //    {
   66          //        buf[i] = arr[i];
   67          //    }
   68          
   69          //    // 简单冒泡排序
   70          //    for (i = 0; i < n - 1; i++)
   71          //    {
   72          //        for (j = 0; j < n - 1 - i; j++)
   73          //        {
   74          //            if (buf[j] > buf[j + 1])
   75          //            {
   76          //                temp = buf[j];
   77          //                buf[j] = buf[j + 1];
   78          //                buf[j + 1] = temp;
   79          //            }
   80          //        }
   81          //    }
   82          
   83          //    // 返回中值
   84          //    if (n % 2 == 0)
   85          //        return (buf[n / 2 - 1] + buf[n / 2]) / 2;
   86          //    else
   87          //        return buf[n / 2];
   88          //}
   89          
   90          int MeanFilter(int *arr, int n)   //均值滤波
   91          {
   92   1          int i = 0;
   93   1          float Sum = 0;
   94   1          float result;
   95   1      
   96   1          for (i = 0; i < n; i++)
   97   1          {
   98   2              Sum += arr[i];
   99   2          }
  100   1          result = Sum / n;
  101   1          return (int)result;
  102   1      }
  103          
  104          int max_count(int a, int b)
  105          {
  106   1          int temp_max;
  107   1      
  108   1      //  temp_max=a>b?a:b;
  109   1      //  temp=(temp_max-100)*10/1100;
  110   1      //  temp=(temp>10)?10:temp;
  111   1      //  return temp;
  112   1          temp_max = a > b ? a : b;
  113   1          return temp_max;
  114   1      //    temp_min=a>b?b:a;
  115   1      //    if(temp_max>200)
  116   1      //    {return 1;}
  117   1      //    else
  118   1      //    {return 0;}
  119   1      
  120   1      }
  121          int min_count(int a, int b)
  122          {
  123   1          int temp_min;
C251 COMPILER V5.60.0,  adc                                                                05/06/25  17:43:16  PAGE 3   

  124   1      
  125   1      //  temp_max=a>b?a:b;
  126   1      //  temp=(temp_max-100)*10/1100;
  127   1      //  temp=(temp>10)?10:temp;
  128   1      //  return temp;
  129   1          temp_min = a < b ? a : b;
  130   1          return temp_min;
  131   1      //  temp_min=a>b?b:a;
  132   1      //  if(temp_max>200)
  133   1      //  {return 1;}
  134   1      //  else
  135   1      //  {return 0;}
  136   1      
  137   1      }
  138          
  139          float error_get(int *temp, int flag)
  140          {
  141   1          float L, R, awm;
  142   1      //  int A=1,B=0;
  143   1      
  144   1      //  A=(int)abs(temp[5]-temp[6])/100;
  145   1      //  printf("%d\r\n",sizeof(temp[5]));
  146   1      //  printf("%d,%d\r\n",abs(temp[5]-temp[6]),A);
  147   1          if (flag == cross)
  148   1          {
  149   2              awm = (float)(temp[0] - temp[4]) / (float)(temp[0] + temp[4]);
  150   2          }
  151   1          else if (flag == right_angle)
  152   1          {
  153   2              L = sqrt((double)temp[0] * (double)temp[0] + (double)temp[1] * (double)temp[1]);
  154   2              R = sqrt((double)temp[3] * (double)temp[3] + (double)temp[4] * (double)temp[4]);
  155   2              awm = (L - R) / (L + R);
  156   2          }
  157   1          else
  158   1          {
  159   2              L = sqrt((double)temp[0] * (double)temp[0] + (double)temp[1] * (double)temp[1]);
  160   2              R = sqrt((double)temp[3] * (double)temp[3] + (double)temp[4] * (double)temp[4]);
  161   2              awm = (L - R) / (L + R);
  162   2          }
  163   1          
  164   1      //    ADC_error = awm;
  165   1          return awm;
  166   1      
  167   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       702     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         52
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
