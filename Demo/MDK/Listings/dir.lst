C251 COMPILER V5.60.0,  dir                                                                17/07/25  14:21:47  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE dir
OBJECT MODULE PLACED IN .\Objects\dir.obj
COMPILER INVOKED BY: D:\APP\Rubbish\c251\C251\BIN\C251.EXE ..\CODE\dir.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\C
                    -ODE;..\USER;..\..\lib\zf_app;..\..\lib\zf_base;..\..\lib\zf_bsp) DEBUG PRINT(.\Listings\dir.lst) TABS(2) OBJECT(.\Object
                    -s\dir.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          float temp = 0;
    3          extern char state[30];
    4          int pid_lead = 0;
    5          
    6          void Dir_Loop(float error, float speed_goal, int flag)
    7          {
    8   1      
    9   1          if((state[state_lead]==Big_Circ_Left)||(state[state_lead]==Big_Circ_Right)||
   10   1            (state[state_lead]==Small_Circ_Left)||(state[state_lead]==Small_Circ_Left))
   11   1          {
   12   2              pid_lead = 0;
   13   2          }
   14   1          else if((state[state_lead]==Ramp))
   15   1          {
   16   2              pid_lead = 0;
   17   2          }
   18   1          else if((state[state_lead]==Obstacle))
   19   1          {
   20   2              pid_lead = 0;
   21   2          }
   22   1          else
   23   1              pid_lead = 0;
   24   1          
   25   1          dir_loop_pid.ek =  error;
   26   1          temp =  fabs(error) * Kp1[pid_lead]* dir_loop_pid.ek
   27   1                  + Kp2[pid_lead] * dir_loop_pid.ek
   28   1                  - Kd1[pid_lead] * imu660ra_gyro_z / 65.6
   29   1                  + Kd2[pid_lead] * (dir_loop_pid.ek - dir_loop_pid.ek_1);
   30   1      
   31   1          dir_loop_pid.ek_1 = dir_loop_pid.ek;
   32   1          
   33   1          motor_L_pid.SetValue = speed_goal - temp;
   34   1          motor_R_pid.SetValue = speed_goal + temp;
   35   1          
   36   1      //    motor_L_pid.SetValue = 250 ;
   37   1      //    motor_R_pid.SetValue = 250 ;
   38   1          
   39   1      //    if(error < -0.4)
   40   1      //    {
   41   1      //      motor_L_pid.SetValue = 1.5*speed_goal - temp;
   42   1      //      motor_R_pid.SetValue = 50;
   43   1      //    }else if(error > 0.4)
   44   1      //    {
   45   1      //      motor_L_pid.SetValue = 50;
   46   1      //      motor_R_pid.SetValue = 1.5*speed_goal + temp;
   47   1      //    }else if(error < -0.3)
   48   1      //    {
   49   1      //      motor_L_pid.SetValue = 1.2*speed_goal - temp;
   50   1      //      motor_R_pid.SetValue = 100;
   51   1      //    }else if(error > 0.3)
   52   1      //    {
   53   1      //      motor_L_pid.SetValue = 100;
   54   1      //      motor_R_pid.SetValue = 1.2*speed_goal + temp;
   55   1      //    }else
   56   1      //    {
   57   1      //      motor_L_pid.SetValue = speed_goal - temp;
C251 COMPILER V5.60.0,  dir                                                                17/07/25  14:21:47  PAGE 2   

   58   1      //      motor_R_pid.SetValue = speed_goal + temp;
   59   1      //    }
   60   1      
   61   1      //    if(fabs(error)>0.4)
   62   1      //    {
   63   1      //      motor_L_pid.SetValue = 110 - temp;
   64   1      //      motor_R_pid.SetValue = 110 + temp;
   65   1      //    }else if(fabs(error)>0.2)
   66   1      //    {
   67   1      //      motor_L_pid.SetValue = 135 - temp;
   68   1      //      motor_R_pid.SetValue = 135 + temp;
   69   1      //    }else
   70   1      //    {
   71   1      //      motor_L_pid.SetValue = speed_goal - temp;
   72   1      //      motor_R_pid.SetValue = speed_goal + temp;
   73   1      //    }
   74   1              
   75   1      }
*** WARNING C47 IN LINE 6 OF ..\CODE\dir.c: 'flag': unreferenced parameter
   76          
   77          
   78          
   79          
   80          //void Dir_Loop(float error, float speed_goal, int flag)
   81          //{
   82          ////  if(flag==0)
   83          ////  {
   84          ////
   85          ////  dir_loop_pid.KP=Kp_Select(error);
   86          ////      dir_loop_pid.ek =  error;
   87          ////   temp= dir_loop_pid.KP * dir_loop_pid.ek  +100*dir_loop_pid.ek
   88          ////  - imu660ra_gyro_z / 65.6
   89          ////  + dir_loop_pid.KD * (dir_loop_pid.ek - dir_loop_pid.ek_1)
   90          ////  ;
   91          ////  dir_loop_pid.ek_1=dir_loop_pid.ek;
   92          //// ;
   93          ////  }
   94          ////  else
   95          ////  printf("%f\r\n",error);
   96          //    {
   97          //        dir_loop_pid.KP = Kp_Select(error);
   98          //        dir_loop_pid.ek =  error;
   99          //        temp =  fabs(error) * 500 * dir_loop_pid.ek //800 200  /600 300
  100          //                + 300 * dir_loop_pid.ek
  101          //                - imu660ra_gyro_z / 65.6
  102          //                + dir_loop_pid.KD * (dir_loop_pid.ek - dir_loop_pid.ek_1);
  103          ////      printf("%f\r\n",error);
  104          //        dir_loop_pid.ek_1 = dir_loop_pid.ek;
  105          ////  temp=temp;
  106          //    }
  107          ////  printf("%f\r\n",temp);
  108          //    
  109          ////    if(speed_goal - temp > 2*speed_goal)
  110          ////        {motor_L_pid.SetValue =2*speed_goal;}
  111          ////        else
  112          ////    if(speed_goal + temp >2*speed_goal)
  113          ////        motor_R_pid.SetValue = 2*speed_goal;
  114          ////        else
  115          ////    if(speed_goal - temp <-1*speed_goal)
  116          ////        {motor_L_pid.SetValue =-1*speed_goal;}
  117          ////        else
  118          ////    if(speed_goal + temp <-1*speed_goal)
  119          ////        motor_R_pid.SetValue = -1*speed_goal;
  120          ////        else
  121          ////        {
  122          //          motor_L_pid.SetValue = speed_goal - temp;
C251 COMPILER V5.60.0,  dir                                                                17/07/25  14:21:47  PAGE 3   

  123          //          motor_R_pid.SetValue = speed_goal + temp;
  124          ////        }
  125          
  126          //}
  127          
  128          //void showmenu()
  129          //{
  130          //  if(P42 == 0)
  131          //  {
  132          //    position = position + 16;
  133          //    lcd_clear(WHITE);
  134          //    dapos++;
  135          //    delay_ms(50);
  136          //    if(position == 32)
  137          //    {
  138          //      position = 0;
  139          //      dapos = 0;
  140          //    }
  141          //  }
  142          //  if(P71 == 0)
  143          //  {
  144          //    position = position - 16;
  145          //    lcd_clear(WHITE);
  146          //    dapos--;
  147          //    delay_ms(50);
  148          //    if(position == -16)
  149          //    {
  150          //      position = 16;
  151          //      dapos = 1;
  152          //    }
  153          //  }
  154          //  if(P72 == 0)
  155          //  {
  156          //    da[dapos] = da[dapos] - 5;
  157          //    delay_ms(150);
  158          //    if(da[dapos] < 0)
  159          //    {
  160          //      da[dapos] = 0;
  161          //    }
  162          //  }
  163          //  if(P70 == 0)
  164          //  {
  165          //    da[dapos] = da[dapos] + 5;
  166          //    delay_ms(150);
  167          //  }
  168          //  lcd_showchar(50,position,'<');
  169          //}
  170          
  171          //void Dir_Loop(float error,float speed_goal,int flag)
  172          //{
  173          
  174          //if(flag==0)
  175          //{
  176          //  count++;
  177          //  if(count<60)
  178          //  {
  179          //      P67=1;
  180          //  }
  181          //  else
  182          //  {
  183          //      P67=0;
  184          //      count=0;
  185          //  }
  186          //
  187          //  dir_loop_pid.KP=Kp_Select_1(error);
  188          //}
C251 COMPILER V5.60.0,  dir                                                                17/07/25  14:21:47  PAGE 4   

  189          //else
  190          //{
  191          //  count=0;
  192          //  P67=0;
  193          //      dir_loop_pid.KP=Kp_Select(error);
  194          //}
  195          
  196          //  dir_loop_pid.ek =  error;
  197          //   temp= dir_loop_pid.KP* dir_loop_pid.ek
  198          ////    -imu660ra_gyro_z / 65.6
  199          //  + dir_loop_pid.KD * (dir_loop_pid.ek - dir_loop_pid.ek_1)
  200          //  ;
  201          //  dir_loop_pid.ek_1=dir_loop_pid.ek;
  202          //  motor_L_pid.SetValue=speed_goal-temp;
  203          //  motor_R_pid.SetValue=speed_goal+temp;
  204          //}
  205          
  206          float  Kp_Select(float error)
  207          {
  208   1          return fabs(error) * 50;
  209   1      //    if(error < 0.05 && error > -0.05) // section1
  210   1      //      return 150;
  211   1      //    else if(error < 0.1 && error > -0.1) // section2
  212   1      //      return 150;
  213   1      //    else if(error < 0.15 && error > -0.15) //3
  214   1      //          return 150;
  215   1      //    else if(error <0.2 && error > -0.2)
  216   1      //      return  150;
  217   1      //    else if(error < 0.25 && error > -0.25)
  218   1      //      return  150;
  219   1      //    else if(error <0.3 && error > -0.3)
  220   1      //      return 180;
  221   1      //    else if(error < 0.35 && error > -0.35)
  222   1      //          return 210;
  223   1      //    else if(error < 0.4 && error > -0.4)
  224   1      //      return 240;
  225   1      //    else if(error < 0.45 && error > -0.45)
  226   1      //      return 270;
  227   1      //    else if(error < 0.5 && error > -0.5)
  228   1      //      return 300;
  229   1      //    else if(error < 0.55 && error > -0.55)
  230   1      //      return 330;
  231   1      //    else
  232   1      //      { return 400;}
  233   1      }
  234          
  235          //void angle_loop()
  236          //{
  237          //  float angle_speed=0;
  238          //  angle_speed=(motor_R_pid.SetValue-motor_L_pid.SetValue)/15.5;
  239          //
  240          //}
  241          
  242          //void Dir_Loop(float error,float speed_goal)
  243          //{
  244          
  245          //  float inc=0;
  246          ////    dir_loop_pid.KP=Kp_Select(error)*0.6;
  247          //      dir_loop_pid.ActValue =  error;
  248          
  249          //      inc=PID_Control_Inc(&dir_loop_pid,1);
  250          //  if(inc>-3&&inc<3)
  251          //  {inc=0;}
  252          //      temp+=inc;
  253          //  dir_loop_pid.ek_1=dir_loop_pid.ek;
  254          ////temp=temp*0.6;
C251 COMPILER V5.60.0,  dir                                                                17/07/25  14:21:47  PAGE 5   

  255          ////    printf("%f\r\n",temp);
  256          ////    temp=temp>speed_goal?speed_goal:temp;
  257          ////    temp=temp<(0-speed_goal)?(0-speed_goal):temp;
  258          //  temp=temp>100?100:temp;
  259          //  temp=temp<(-100)?(-100):temp;
  260          //  motor_L_pid.SetValue=speed_goal+temp;
  261          //  motor_R_pid.SetValue=speed_goal-temp;
  262          //}


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       241     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         6          2
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        14     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
