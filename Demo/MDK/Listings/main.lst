C251 COMPILER V5.60.0,  main                                                               17/07/25  01:10:05  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\APP\Rubbish\c251\C251\BIN\C251.EXE ..\USER\main.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\
                    -CODE;..\USER;..\..\lib\zf_app;..\..\lib\zf_base;..\..\lib\zf_bsp) DEBUG PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Obje
                    -cts\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          int adc_value[8] = {0};   //八个电感值
    3          uint8 uart_delay = 0;   //while循环五次串口发送一次数据
    4          extern uint16 dl1b_distance_mm;
    5          extern float Sum_Distance;
    6          int press_flag = 0;
    7          //  Track   Out   Small_Circ_Right  Small_Circ_Left   Out, Track, 
    8          //char state[30] = {Track, Track, Track, Track, Track, Track, Stop};  
    9          char state[30] = {Track, Small_Circ_Left, Track, Small_Circ_Left, Track, Small_Circ_Left, Track, Small_Ci
             -rc_Left, Track, Track, Track, Stop}; //2025赛道元素顺序
   10          
   11          ////速度200
   12          //int SPEED = 200 ;
   13          ////转向环
   14          //int Kp1[5]=  { 350 , 0 , 0 , 0 , 0 };   //320 290 0.3除几字弯还好   300 320 0.4几字弯还可以，折线勉强
   15          //int Kp2[5]=  { 370 , 0 , 0 , 0 , 0 };
   16          //float Kd1[5]={ 0.63 , 0 , 0 , 0 , 0 };
   17          //float Kd2[5]={ 30 , 0 , 0 , 0 , 0 };
   18          ////左环电感判断条件
   19          //int Circ_Jump_Left[4] = { 1900 , 1000 , 500 , 1900 };
   20          ////左环状态判断条件
   21          //int Circ_Left_Dis_Start = 15 ;
   22          //int Circ_Left_Angle = 335 ;
   23          //int Circ_Left_Dis_Final = 50 ;
   24          ////左环行为
   25          //int Circ_Left_Speed_L = 180 ;
   26          //int Circ_Left_Speed_R = 300 ;
   27          //int Circ_Left_Speed_Out = 180 ;
   28          ////出库
   29          //float Out_Jump_Angle = - 70 ;
   30          //int Out_Speed_L = 280 ;
   31          //int Out_Speed_R = 80 ;
   32          ////右环
   33          //int Circ_Jump_Right[4] = { 1200 , 0 , 200 , 1000 };
   34          //int Circ_Right_Dis_Start = 10 ;
   35          //int Circ_Right_Angle = - 340 ;
   36          //int Circ_Right_Dis_Final = 80 ;
   37          //int Circ_Right_Speed_L = 250 ;
   38          //int Circ_Right_Speed_R = 150 ;
   39          //int Circ_Right_Speed_Out = 150 ;
   40          
   41          ////速度180
   42          //int SPEED = 180 ;
   43          ////转向环
   44          //int Kp1[5]=  { 300 , 0 , 0 , 0 , 0 };   //320 290 0.3除几字弯还好   300 320 0.4几字弯还可以，折线勉强
   45          //int Kp2[5]=  { 320 , 0 , 0 , 0 , 0 };
   46          //float Kd1[5]={ 0.42 , 0 , 0 , 0 , 0 };
   47          //float Kd2[5]={ 15 , 0 , 0 , 0 , 0 };
   48          ////左环电感判断条件
   49          //int Circ_Jump_Left[4] = { 1900 , 1000 , 500 , 1900 };
   50          ////左环状态判断条件
   51          //int Circ_Left_Dis_Start = 15 ;
   52          //int Circ_Left_Angle = 335 ;
   53          //int Circ_Left_Dis_Final = 50 ;
   54          ////左环行为
   55          //int Circ_Left_Speed_L = 180 ;
   56          //int Circ_Left_Speed_R = 300 ;
C251 COMPILER V5.60.0,  main                                                               17/07/25  01:10:05  PAGE 2   

   57          //int Circ_Left_Speed_Out = 180 ;
   58          ////出库
   59          //float Out_Jump_Angle = - 70 ;
   60          //int Out_Speed_L = 280 ;
   61          //int Out_Speed_R = 80 ;
   62          ////右环
   63          //int Circ_Jump_Right[4] = { 1200 , 0 , 200 , 1000 };
   64          //int Circ_Right_Dis_Start = 10 ;
   65          //int Circ_Right_Angle = - 340 ;
   66          //int Circ_Right_Dis_Final = 80 ;
   67          //int Circ_Right_Speed_L = 250 ;
   68          //int Circ_Right_Speed_R = 150 ;
   69          //int Circ_Right_Speed_Out = 150 ;
   70          
   71          //速度150
   72          int SPEED = 150 ;
   73          //转向环
   74          int Kp1[5]=  { 200 , 0 , 0 , 0 , 0 };   //
   75          int Kp2[5]=  { 150 , 0 , 0 , 0 , 0 };
   76          float Kd1[5]={ 0.2 , 0 , 0 , 0 , 0 };
   77          float Kd2[5]={ 0 , 0 , 0 , 0 , 0 };
   78          //左环电感判断条件
   79          int Circ_Jump_Left[4] = { 2000 , 1000 , 500 , 2000 };
   80          //左环状态判断条件
   81          int Circ_Left_Dis_Start = 20 ;
   82          int Circ_Left_Angle = 345 ;
   83          int Circ_Left_Dis_Final = 50 ;
   84          //左环行为
   85          int Circ_Left_Speed_L = 150 ;
   86          int Circ_Left_Speed_R = 240 ;
   87          int Circ_Left_Speed_Out = 150 ;
   88          //出库
   89          int Out_Jump_Angle = - 70 ;
   90          int Out_Speed_L = 250 ;
   91          int Out_Speed_R = 50 ;
   92          //右环
   93          int Circ_Jump_Right[4] = { 2000 , 500 , 1000 , 2000 };
   94          int Circ_Right_Dis_Start = 10 ;
   95          int Circ_Right_Angle = - 340 ;
   96          int Circ_Right_Dis_Final = 80 ;
   97          int Circ_Right_Speed_L = 250 ;
   98          int Circ_Right_Speed_R = 150 ;
   99          int Circ_Right_Speed_Out = 150 ;
  100          
  101          //速度环PID 
  102          int KP_SPEED_L = 100 ;
  103          int KP_SPEED_R = 100 ;
  104          int KI_SPEED_L = 19 ;
  105          int KI_SPEED_R = 19 ;
  106          int KD_SPEED_L = 0 ;
  107          int KD_SPEED_R = 0 ;
  108          
  109          int main()
  110          {
  111   1          board_init();
  112   1          pit_timer_ms(TIM_1, 5);
  113   1          printf("pit init\r\n");
  114   1          pit_timer_ms(TIM_4, 5);
  115   1          NVIC_SetPriority(TIMER1_IRQn, 2);
  116   1          NVIC_SetPriority(UART4_IRQn, 3);
  117   1          InitPID();
  118   1          iap_init();
  119   1          EnableGlobalIRQ(); // 开启总中断
  120   1          printf("all init\r\n");
  121   1          printf("motor pid set value\r\n");
  122   1          Read_FLASH();
C251 COMPILER V5.60.0,  main                                                               17/07/25  01:10:05  PAGE 3   

  123   1        
  124   1      //    pwm_duty(PWMA_CH4P_P66, 3000 );   //      引脚校正
  125   1      //    pwm_duty(PWMA_CH1P_P60, 3000 );   //右负
  126   1      //    pwm_duty(PWMA_CH3P_P64, 3000 );   //左正
  127   1      //    pwm_duty(PWMA_CH2P_P62, 3000 ); 
  128   1      //    P42   //按下
  129   1      //    P70   //右
  130   1      //    P72   //左
  131   1      //    P71   //上
  132   1      //    P73   //下
  133   1        
  134   1      //    motor_L_pid.SetValue = 0 ;
  135   1      //    motor_R_pid.SetValue = 0 ;
  136   1          
  137   1      //    delay_ms(7000);
  138   1          start_0 = 1;
  139   1          
  140   1          while (1)     //正常循迹
  141   1          {
  142   2              if(!P42){
  143   3              sum_menu_flag += 1;
  144   3                if(sum_menu_flag >= 100){
  145   4                  menu_flag += 1;
  146   4                  if(menu_flag >= 2){
  147   5                    menu_flag = 0;
  148   5                  }
  149   4                }
  150   3              }
  151   2              if(menu_flag){
  152   3              adjust_menu();
  153   3              }
  154   2              if (TIM1_Flag)        {
  155   3                  uart_delay++;
  156   3                  if (uart_delay > 4)
  157   3                  {
  158   4                      uart_delay = 0;
  159   4                    
  160   4                      printf("%d,%d,%d,%d\r\n", adc_value[0], adc_value[1],
  161   4                                                adc_value[3], adc_value[4]);
  162   4                    
  163   4      //                printf("%f,%f,%f,%f\r\n", motor_L_pid.ActValue, motor_R_pid.ActValue,
  164   4      //                                          motor_L_pid.SetValueTmp, motor_R_pid.SetValueTmp);
  165   4                    
  166   4                  }
  167   3                  
  168   3                  P52 = 0;    //LED亮
  169   3                  imu660ra_get_gyro();    //陀螺仪
  170   3                  
  171   3      //            dl1b_get_distance();    //2024避障
  172   3                
  173   3                  state_detect(adc_value);
  174   3                
  175   3                  switch (state[state_lead])
  176   3                  {
  177   4                      case Track:
  178   4                          Track_Action(adc_value);
  179   4                          break;
  180   4                      case Out:
  181   4                          Out_Action();
  182   4                      case Big_Circ_Left:
  183   4                      case Small_Circ_Left:
  184   4                          Circ_Left_Action(adc_value);
  185   4                          break;
  186   4                      case Big_Circ_Right:
  187   4                      case Small_Circ_Right:
  188   4                          Circ_Right_Action(adc_value);
C251 COMPILER V5.60.0,  main                                                               17/07/25  01:10:05  PAGE 4   

  189   4                          break;
  190   4                      case Obstacle:
  191   4                          Obstacle_Action();
  192   4                          break;
  193   4                      case Ramp:
  194   4                          Track_Action(adc_value);
  195   4                          break;
  196   4                      case Stop:
  197   4                          Stop_Action();
  198   4      //                case Left_Right_Angle:
  199   4      //                    Left_Right_Angle_Action(adc_value);
  200   4      //                case Right_Right_Angle:
  201   4      //                    Right_Right_Angle_Action(adc_value);
  202   4                  }
  203   3                          
  204   3      //            lcd_showint32(0,0,adc_value[0],4);
  205   3      //            lcd_showint32(0,1,adc_value[1],4);
  206   3      //            lcd_showint32(0,2,adc_value[3],4);
  207   3      //            lcd_showint32(0,3,adc_value[4],4);
  208   3                  
  209   3      //            lcd_showint16(0,5,imu660ra_gyro_z);
  210   3      //            lcd_showfloat(0,6,error,1,6);
  211   3                  
  212   3      //            lcd_showint32(0,4,adc_value[2],4);
  213   3      //            lcd_showint32(0,5,Flag_Circ,4);
  214   3      //            lcd_showint32(0,6,Sum_Distance,4);
  215   3      //            lcd_showint32(0,7,(int)state_lead,4);
  216   3      //            lcd_showint32(0,8,(int)dl1b_distance_mm,4);
  217   3      
  218   3                  TIM1_Flag = 0;
  219   3                  P52 = 1;
  220   3              }
  221   2          }
  222   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       348     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       169     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       355     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
